!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/odinhg/Python/codenames/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
BatchGenerator	old/batched.py	/^class BatchGenerator:$/;"	c
BatchGenerator	old/batched_simple.py	/^class BatchGenerator():$/;"	c
BatchGenerator	old/batching.py	/^class BatchGenerator:$/;"	c
ClueLoss	old/batched.py	/^class ClueLoss(nn.Module):$/;"	c
ClueLoss	old/batched_simple.py	/^class ClueLoss(nn.Module):$/;"	c
ClueLoss	old/clueloss.py	/^class ClueLoss(nn.Module):$/;"	c
ClueLoss	old/main.py	/^class ClueLoss(nn.Module):$/;"	c
ClueLoss	old/simple.py	/^class ClueLoss(nn.Module):$/;"	c
Codenames Spymaster üïµÔ∏è	README.md	/^# Codenames Spymaster üïµÔ∏è$/;"	c
Example usage	README.md	/^### Example usage$/;"	S	section:Codenames Spymaster üïµÔ∏è""Generating clues from pre-trained word embeddings using a contrastive score function
F	old/batched.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	old/batched_simple.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	old/clueloss.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	old/inference.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	old/layers.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	old/main.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
F	old/simple.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
Generating clues from pre-trained word embeddings using a contrastive score function	README.md	/^## Generating clues from pre-trained word embeddings using a contrastive score function$/;"	s	chapter:Codenames Spymaster üïµÔ∏è
PermEquivLayer	old/layers.py	/^class PermEquivLayer(nn.Module):$/;"	c
PermEquivLayer	old/main.py	/^class PermEquivLayer(nn.Module):$/;"	c
PermEquivLayer	old/simple.py	/^class PermEquivLayer(nn.Module):$/;"	c
Set2Vec	old/layers.py	/^class Set2Vec(nn.Module):$/;"	c
Set2Vec	old/main.py	/^class Set2Vec(nn.Module):$/;"	c
Set2Vec	old/simple.py	/^class Set2Vec(nn.Module):$/;"	c
SpyMaster	old/layers.py	/^class SpyMaster(nn.Module):$/;"	c
SpyMasterModel	old/main.py	/^class SpyMasterModel(nn.Module):$/;"	c
SpyMasterModel	old/simple.py	/^class SpyMasterModel(nn.Module):$/;"	c
_	main.py	/^        max_dist_to_targets, _ = torch.max(dist_to_targets, dim=-1)$/;"	v
_	main.py	/^dist_to_assassin, _ = torch.min(dist_to_assassin, dim=-1)$/;"	v
_	main.py	/^min_dist_to_bystanders, _ = torch.min(dist_to_bystanders, dim=-1)$/;"	v
_	main.py	/^min_dist_to_enemy, _ = torch.min(dist_to_enemy, dim=-1)$/;"	v
_	old/inference.py	/^_, closest_idx = torch.topk(dist_to_vocab, 50, largest=False)$/;"	v
__init__	old/batched.py	/^    def __init__($/;"	m	class:BatchGenerator
__init__	old/batched.py	/^    def __init__(self, margin: float = 0.3):$/;"	m	class:ClueLoss
__init__	old/batched_simple.py	/^    def __init__(self): $/;"	m	class:ClueLoss
__init__	old/batched_simple.py	/^    def __init__(self, deck_filename: str = "codename_vocab.txt", emb_name: str= "42B", emb_dim:/;"	m	class:BatchGenerator
__init__	old/batching.py	/^    def __init__($/;"	m	class:BatchGenerator
__init__	old/clueloss.py	/^    def __init__(self, margin: float = 0.0):$/;"	m	class:ClueLoss
__init__	old/layers.py	/^    def __init__(self, emb_dim: int, hidden_dim: int=50):$/;"	m	class:SpyMaster
__init__	old/layers.py	/^    def __init__(self, in_dim: int, hidden_dim: int, out_dim: int):$/;"	m	class:Set2Vec
__init__	old/layers.py	/^    def __init__(self, in_dim: int, out_dim: int):$/;"	m	class:PermEquivLayer
__init__	old/main.py	/^    def __init__(self, emb_dim: int, expand_factor: int = 1):$/;"	m	class:SpyMasterModel
__init__	old/main.py	/^    def __init__(self, enemy_margin: float, bystander_margin: float, assassin_margin: float):$/;"	m	class:ClueLoss
__init__	old/main.py	/^    def __init__(self, in_dim: int, hidden_dim: int, out_dim: int):$/;"	m	class:Set2Vec
__init__	old/main.py	/^    def __init__(self, in_dim: int, out_dim: int):$/;"	m	class:PermEquivLayer
__init__	old/simple.py	/^    def __init__(self, emb_dim: int, expand_factor: int = 2):$/;"	m	class:SpyMasterModel
__init__	old/simple.py	/^    def __init__(self, enemy_margin: float, bystander_margin: float, assassin_margin: float):$/;"	m	class:ClueLoss
__init__	old/simple.py	/^    def __init__(self, in_dim: int, hidden_dim: int, out_dim: int):$/;"	m	class:Set2Vec
__init__	old/simple.py	/^    def __init__(self, in_dim: int, out_dim: int):$/;"	m	class:PermEquivLayer
assassin_embedding	main.py	/^assassin_embedding = word_embedding.get_vecs_by_tokens($/;"	v
assassin_margin	old/main.py	/^enemy_margin, bystander_margin, assassin_margin = 0.05, 0.01, 0.1$/;"	v
assassin_margin	old/simple.py	/^enemy_margin, bystander_margin, assassin_margin = 0.05, 0.01, 0.1$/;"	v
assassin_word	main.py	/^assassin_word = "knife"$/;"	v
batch_generator	old/batched.py	/^batch_generator = BatchGenerator()$/;"	v
batch_generator	old/batched_simple.py	/^batch_generator = BatchGenerator()$/;"	v
batch_generator	old/train.py	/^batch_generator = BatchGenerator(emb_dim=config.emb_dim, emb_name=config.emb_name, deck_filename/;"	v
batch_negative	old/batched.py	/^        batch_positive, batch_negative = batch_generator.get_batch($/;"	v
batch_negative	old/train.py	/^        batch_positive, batch_negative = batch_generator.get_batch($/;"	v
batch_positive	old/batched.py	/^        batch_positive, batch_negative = batch_generator.get_batch($/;"	v
batch_positive	old/train.py	/^        batch_positive, batch_negative = batch_generator.get_batch($/;"	v
batch_size	old/batched.py	/^batch_size = 256 $/;"	v
batch_size	old/batched_simple.py	/^batch_size = 128$/;"	v
batch_size	old/config.py	/^batch_size = 256 $/;"	v
bystander_embeddings	main.py	/^bystander_embeddings = word_embedding.get_vecs_by_tokens($/;"	v
bystander_margin	old/main.py	/^enemy_margin, bystander_margin, assassin_margin = 0.05, 0.01, 0.1$/;"	v
bystander_margin	old/simple.py	/^enemy_margin, bystander_margin, assassin_margin = 0.05, 0.01, 0.1$/;"	v
bystander_words	main.py	/^bystander_words = ["pine", "hit", "princess", "car"]$/;"	v
c	main.py	/^        c = 1$/;"	v
c_t	old/main.py	/^            c_t = model(x_t, x_e, x_b, x_a)$/;"	v
c_t	old/simple.py	/^            c_t = model(x_t)$/;"	v
candidates	main.py	/^candidates = {}$/;"	v
checkpoint_filename	old/config.py	/^checkpoint_filename = "spymaster.pt"$/;"	v
closest_idx	old/inference.py	/^_, closest_idx = torch.topk(dist_to_vocab, 50, largest=False)$/;"	v
clue	old/inference.py	/^clue = model(positive_emb, negative_emb).squeeze(0)$/;"	v
clues	old/batched.py	/^        clues = model(batch_positive, batch_negative)$/;"	v
clues	old/batched_simple.py	/^        clues = model(targets)$/;"	v
clues	old/inference.py	/^clues = []$/;"	v
clues	old/train.py	/^        clues = model(batch_positive, batch_negative)$/;"	v
compute_distances	main.py	/^def compute_distances($/;"	f	typeref:typename:torch.Tensor
deck	old/main.py	/^deck = load_deck()$/;"	v
deck	old/simple.py	/^deck = load_deck()$/;"	v
deck_filename	old/config.py	/^deck_filename = "codename_vocab.txt"$/;"	v
deck_numpy	old/main.py	/^deck_numpy = np.array(deck, dtype="object")$/;"	v
deck_numpy	old/simple.py	/^deck_numpy = np.array(deck, dtype="object")$/;"	v
diameters	old/main.py	/^        diameters = torch.tensor([torch.cdist(x_T[idx], x_T[idx]).max() for idx in subsets_idx])$/;"	v
diameters	old/simple.py	/^        diameters = torch.tensor([torch.cdist(x_T[idx], x_T[idx]).max() for idx in subsets_idx])$/;"	v
difficulties	old/batched.py	/^difficulties = [0, 1, 2, 4, 8, 16, 32]$/;"	v
difficulties	old/config.py	/^difficulties = [0, 1, 2, 4, 8, 16, 32, 64, 128]$/;"	v
dist_to_assassin	main.py	/^dist_to_assassin = compute_distances($/;"	v
dist_to_assassin	main.py	/^dist_to_assassin, _ = torch.min(dist_to_assassin, dim=-1)$/;"	v
dist_to_bystanders	main.py	/^dist_to_bystanders = compute_distances($/;"	v
dist_to_enemy	main.py	/^dist_to_enemy = compute_distances($/;"	v
dist_to_targets	main.py	/^        dist_to_targets = dist_to_team[:, idxs]$/;"	v
dist_to_team	main.py	/^dist_to_team = compute_distances($/;"	v
dist_to_vocab	old/inference.py	/^dist_to_vocab = torch.linalg.norm(vocab_emb - clue.unsqueeze(0), dim=1)$/;"	v
distance_function	main.py	/^distance_function = "cosine" $/;"	v
easiest_subset_idx	old/main.py	/^        easiest_subset_idx = torch.argsort(diameters) # Indicies of subsets sorted by diameter i/;"	v
easiest_subset_idx	old/simple.py	/^        easiest_subset_idx = torch.argsort(diameters) # Indicies of subsets sorted by diameter i/;"	v
emb_dim	old/config.py	/^emb_dim = 50#300$/;"	v
emb_dim	old/main.py	/^emb_dim = 300# 50, 100, 200 or 300$/;"	v
emb_dim	old/simple.py	/^emb_dim = 300# 50, 100, 200 or 300$/;"	v
emb_name	old/config.py	/^emb_name = "6B"#"42B"$/;"	v
emb_name	old/main.py	/^emb_name = "42B" #6B, twitter.27B, 42B...$/;"	v
emb_name	old/simple.py	/^emb_name = "42B" #6B, twitter.27B, 42B...$/;"	v
embedded_deck	old/main.py	/^embedded_deck = words2vec(word_embeddings, deck)$/;"	v
embedded_deck	old/simple.py	/^embedded_deck = words2vec(word_embeddings, deck)$/;"	v
enemy_embeddings	main.py	/^enemy_embeddings = word_embedding.get_vecs_by_tokens($/;"	v
enemy_margin	old/main.py	/^enemy_margin, bystander_margin, assassin_margin = 0.05, 0.01, 0.1$/;"	v
enemy_margin	old/simple.py	/^enemy_margin, bystander_margin, assassin_margin = 0.05, 0.01, 0.1$/;"	v
enemy_words	main.py	/^enemy_words = ["cast", "engine", "bee", "death", "stick"]$/;"	v
forward	old/batched.py	/^    def forward(self, clues, positives, negatives):$/;"	m	class:ClueLoss
forward	old/batched_simple.py	/^    def forward(self, clues, targets):$/;"	m	class:ClueLoss
forward	old/clueloss.py	/^    def forward(self, clues, positives, negatives):$/;"	m	class:ClueLoss
forward	old/layers.py	/^    def forward($/;"	m	class:SpyMaster	typeref:typename:torch.Tensor
forward	old/layers.py	/^    def forward(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:PermEquivLayer	typeref:typename:torch.Tensor
forward	old/layers.py	/^    def forward(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:Set2Vec	typeref:typename:torch.Tensor
forward	old/main.py	/^    def forward($/;"	m	class:SpyMasterModel	typeref:typename:torch.Tensor
forward	old/main.py	/^    def forward(self, c_t, x_t, x_e, x_b, x_a):$/;"	m	class:ClueLoss
forward	old/main.py	/^    def forward(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:PermEquivLayer	typeref:typename:torch.Tensor
forward	old/main.py	/^    def forward(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:Set2Vec	typeref:typename:torch.Tensor
forward	old/simple.py	/^    def forward($/;"	m	class:SpyMasterModel	typeref:typename:torch.Tensor
forward	old/simple.py	/^    def forward(self, c_t, x_t):$/;"	m	class:ClueLoss
forward	old/simple.py	/^    def forward(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:PermEquivLayer	typeref:typename:torch.Tensor
forward	old/simple.py	/^    def forward(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:Set2Vec	typeref:typename:torch.Tensor
generate_random_position	old/main.py	/^def generate_random_position(deck: np.ndarray, embedded_deck: torch.Tensor):$/;"	f
generate_random_position	old/simple.py	/^def generate_random_position(deck: np.ndarray, embedded_deck: torch.Tensor):$/;"	f
get_batch	old/batched.py	/^    def get_batch($/;"	m	class:BatchGenerator	typeref:typename:torch.Tensor
get_batch	old/batched_simple.py	/^    def get_batch(self, batch_size: int, n_t: int, max_difficulty: int) -> torch.Tensor:$/;"	m	class:BatchGenerator	typeref:typename:torch.Tensor
get_batch	old/batching.py	/^    def get_batch($/;"	m	class:BatchGenerator	typeref:typename:torch.Tensor
get_random_words	old/inference.py	/^def get_random_words(deck_filename: str, n_positive: int, n_negative: int) -> tuple[list[str]]:$/;"	f	typeref:typename:tuple[list[str]]
hidden_dim	old/config.py	/^hidden_dim = 300 $/;"	v
hyperparams	old/batched.py	/^hyperparams = itertools.product($/;"	v
hyperparams	old/train.py	/^hyperparams = itertools.product($/;"	v
idx	old/main.py	/^            idx = subsets_idx[subset_idx]$/;"	v
idx	old/simple.py	/^            idx = subsets_idx[subset_idx]$/;"	v
illegal_words	main.py	/^illegal_words = set(team_words + enemy_words + bystander_words + [assassin_word])$/;"	v
illegal_words	old/inference.py	/^illegal_words = set(positive_words + negative_words)$/;"	v
load_deck	old/main.py	/^def load_deck(filename: str = "codename_vocab.txt") -> list[str]:$/;"	f	typeref:typename:list[str]
load_deck	old/simple.py	/^def load_deck(filename: str = "codename_vocab.txt") -> list[str]:$/;"	f	typeref:typename:list[str]
load_vocab	main.py	/^def load_vocab(filename: str, allowed_words: set[str] | None = None) -> list[str]:$/;"	f	typeref:typename:list[str]
load_vocabulary	old/batched.py	/^def load_vocabulary($/;"	f	typeref:typename:list[str]
load_vocabulary	old/batched_simple.py	/^def load_vocabulary(word_embedding, vocab_filename: str="english_vocab.txt") -> list[str]:$/;"	f	typeref:typename:list[str]
load_vocabulary	old/inference.py	/^def load_vocabulary($/;"	f	typeref:typename:list[str]
loss	old/batched.py	/^        loss = loss_function(clues, batch_positive, batch_negative)$/;"	v
loss	old/batched_simple.py	/^        loss = loss_function(clues, targets)$/;"	v
loss	old/inference.py	/^loss = loss_function(clue.unsqueeze(0), positive_emb, negative_emb)$/;"	v
loss	old/main.py	/^            loss = loss_function(c_t, x_t, x_e, x_b, x_a)$/;"	v
loss	old/simple.py	/^            loss = loss_function(c_t, x_t)$/;"	v
loss	old/train.py	/^        loss = loss_function(clues, batch_positive, batch_negative)$/;"	v
loss_function	old/batched.py	/^loss_function = ClueLoss()$/;"	v
loss_function	old/batched_simple.py	/^loss_function = ClueLoss()$/;"	v
loss_function	old/inference.py	/^loss_function = ClueLoss()$/;"	v
loss_function	old/main.py	/^loss_function = ClueLoss(enemy_margin, bystander_margin, assassin_margin)$/;"	v
loss_function	old/simple.py	/^loss_function = ClueLoss(enemy_margin, bystander_margin, assassin_margin)$/;"	v
loss_function	old/train.py	/^loss_function = ClueLoss()$/;"	v
lr	old/batched.py	/^lr = 0.001$/;"	v
lr	old/batched_simple.py	/^lr = 0.01$/;"	v
lr	old/config.py	/^lr = 0.005$/;"	v
lr	old/main.py	/^lr = 0.001$/;"	v
lr	old/simple.py	/^lr = 0.01$/;"	v
m	old/main.py	/^        m = min(2, len(subsets_idx)) # Use top 5 easiest subsets$/;"	v
m	old/simple.py	/^        m = min(10, len(subsets_idx)) # Use top 5 easiest subsets$/;"	v
margin_assassin	main.py	/^margin_assassin = 1.00$/;"	v
margin_bystander	main.py	/^margin_bystander = 0.10$/;"	v
margin_enemy	main.py	/^margin_enemy = 0.40$/;"	v
max_dist_to_targets	main.py	/^        max_dist_to_targets, _ = torch.max(dist_to_targets, dim=-1)$/;"	v
max_losses	old/main.py	/^max_losses = []$/;"	v
max_losses	old/simple.py	/^max_losses = []$/;"	v
max_n	main.py	/^min_n, max_n = (2, 6)$/;"	v
max_n_negative_words	old/batched.py	/^max_n_negative_words = 17$/;"	v
max_n_negative_words	old/config.py	/^max_n_negative_words = 6#17$/;"	v
max_n_positive_words	old/batched.py	/^max_n_positive_words = 6$/;"	v
max_n_positive_words	old/config.py	/^max_n_positive_words = 2#6$/;"	v
max_n_target_words	old/batched_simple.py	/^max_n_target_words = 6$/;"	v
max_step_loss	old/main.py	/^    max_step_loss = np.max(step_losses)$/;"	v
max_step_loss	old/simple.py	/^    max_step_loss = np.max(step_losses)$/;"	v
max_target_difficulty	old/batched_simple.py	/^max_target_difficulty = 10$/;"	v
max_words_to_guess	old/main.py	/^max_words_to_guess = 5$/;"	v
max_words_to_guess	old/simple.py	/^max_words_to_guess = 3$/;"	v
mean_dist_to_targets	main.py	/^        mean_dist_to_targets = torch.mean(dist_to_targets, dim=-1)$/;"	v
mean_losses	old/main.py	/^mean_losses = []$/;"	v
mean_losses	old/simple.py	/^mean_losses = []$/;"	v
mean_step_loss	old/main.py	/^    mean_step_loss = np.mean(step_losses)$/;"	v
mean_step_loss	old/simple.py	/^    mean_step_loss = np.mean(step_losses)$/;"	v
min_dist_to_bystanders	main.py	/^min_dist_to_bystanders, _ = torch.min(dist_to_bystanders, dim=-1)$/;"	v
min_dist_to_enemy	main.py	/^min_dist_to_enemy, _ = torch.min(dist_to_enemy, dim=-1)$/;"	v
min_losses	old/main.py	/^min_losses = []$/;"	v
min_losses	old/simple.py	/^min_losses = []$/;"	v
min_n	main.py	/^min_n, max_n = (2, 6)$/;"	v
min_step_loss	old/main.py	/^    min_step_loss = np.min(step_losses)$/;"	v
min_step_loss	old/simple.py	/^    min_step_loss = np.min(step_losses)$/;"	v
model	old/batched.py	/^model = SpyMaster(emb_dim=batch_generator.emb_dim, hidden_dim=100)$/;"	v
model	old/batched_simple.py	/^model = SpyMasterModel(emb_dim=batch_generator.emb_dim)$/;"	v
model	old/inference.py	/^model = SpyMaster(emb_dim=config.emb_dim, hidden_dim=config.hidden_dim)$/;"	v
model	old/main.py	/^model = SpyMasterModel(emb_dim)$/;"	v
model	old/simple.py	/^model = SpyMasterModel(emb_dim)$/;"	v
model	old/train.py	/^model = SpyMaster(emb_dim=config.emb_dim, hidden_dim=config.hidden_dim)$/;"	v
n_clue	main.py	/^        n_clue = len(targets)$/;"	v
n_params	old/batched.py	/^n_params = ($/;"	v
n_params	old/train.py	/^n_params = ($/;"	v
n_team	main.py	/^n_team = len(team_words)$/;"	v
n_team_words	old/main.py	/^    n_team_words = len(position["team_words_emb"])$/;"	v
n_team_words	old/simple.py	/^    n_team_words = len(position["team_words_emb"])$/;"	v
negative_emb	old/inference.py	/^negative_emb = word_embedding.get_vecs_by_tokens(negative_words, lower_case_backup=True).unsquee/;"	v
negative_words	old/inference.py	/^negative_words = ["cat"]$/;"	v
nn	old/batched.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	old/batched_simple.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	old/clueloss.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	old/layers.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	old/main.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	old/simple.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
np	main.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	old/batched.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	old/batched_simple.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	old/batching.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	old/inference.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	old/main.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	old/simple.py	/^import numpy as np$/;"	I	nameref:module:numpy
num_params	old/batched.py	/^num_params = sum(p.numel() for p in model.parameters() if p.requires_grad)$/;"	v
num_params	old/batched_simple.py	/^num_params = sum(p.numel() for p in model.parameters() if p.requires_grad)$/;"	v
num_params	old/main.py	/^num_params = sum(p.numel() for p in model.parameters() if p.requires_grad)$/;"	v
num_params	old/simple.py	/^num_params = sum(p.numel() for p in model.parameters() if p.requires_grad)$/;"	v
num_params	old/train.py	/^num_params = sum(p.numel() for p in model.parameters() if p.requires_grad)$/;"	v
optimizer	old/batched.py	/^optimizer = torch.optim.Adam(model.parameters(), lr=lr)$/;"	v
optimizer	old/batched_simple.py	/^optimizer = torch.optim.Adam(model.parameters(), lr=lr)$/;"	v
optimizer	old/main.py	/^optimizer = torch.optim.Adam(model.parameters(), lr=lr)$/;"	v
optimizer	old/simple.py	/^optimizer = torch.optim.Adam(model.parameters(), lr=lr)$/;"	v
optimizer	old/train.py	/^optimizer = torch.optim.Adam(model.parameters(), lr=config.lr)$/;"	v
plt	old/batched.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	old/batched_simple.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	old/main.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	old/simple.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	old/train.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
position	old/main.py	/^    position = generate_random_position(deck_numpy, embedded_deck)$/;"	v
position	old/simple.py	/^    position = generate_random_position(deck_numpy, embedded_deck)$/;"	v
positive_emb	old/inference.py	/^positive_emb = word_embedding.get_vecs_by_tokens(positive_words, lower_case_backup=True).unsquee/;"	v
positive_words	old/inference.py	/^positive_words = ["dog", "puppy"]$/;"	v
preprocess_words	old/batched.py	/^    def preprocess_words(self, words: list[str]):$/;"	m	class:BatchGenerator
preprocess_words	old/batched_simple.py	/^    def preprocess_words(self, words: list[str]):$/;"	m	class:BatchGenerator
preprocess_words	old/batching.py	/^    def preprocess_words(self, words: list[str]):$/;"	m	class:BatchGenerator
score	main.py	/^        score = ($/;"	v
score_list	main.py	/^    targets_list, score_list = clue_dict["targets"], clue_dict["scores"]$/;"	v
spymaster_vocab	main.py	/^spymaster_vocab = "vocab.txt"$/;"	v
step_losses	old/main.py	/^    step_losses = []$/;"	v
step_losses	old/simple.py	/^    step_losses = []$/;"	v
steps	old/batched.py	/^steps = 500 $/;"	v
steps	old/batched_simple.py	/^steps = 400$/;"	v
steps	old/config.py	/^steps = 5000 $/;"	v
steps	old/main.py	/^steps = 50000 $/;"	v
steps	old/simple.py	/^steps = 5000 $/;"	v
subsets_idx	old/main.py	/^        subsets_idx = list(map(list, itertools.combinations(np.arange(n_team_words), r=(j+1))))$/;"	v
subsets_idx	old/simple.py	/^        subsets_idx = list(map(list, itertools.combinations(np.arange(n_team_words), r=(j+1))))$/;"	v
target_embeddings	main.py	/^        target_embeddings = team_embeddings[idxs]$/;"	v
target_words	main.py	/^        target_words = list(team_words_numpy[idxs])$/;"	v
targets	old/batched_simple.py	/^        targets = batch_generator.get_batch(batch_size, n_t, max_difficulty) $/;"	v
targets_diameter	main.py	/^        targets_diameter = torch.cdist(target_embeddings, target_embeddings).max()$/;"	v
targets_list	main.py	/^    targets_list, score_list = clue_dict["targets"], clue_dict["scores"]$/;"	v
team_embeddings	main.py	/^team_embeddings = word_embedding.get_vecs_by_tokens(team_words, lower_case_backup=True)$/;"	v
team_words	main.py	/^team_words = ["india", "flower", "bowl", "beer", "surf"]$/;"	v
team_words_numpy	main.py	/^team_words_numpy = np.array(team_words, dtype="object")$/;"	v
top_k_clues	main.py	/^top_k_clues = 1$/;"	v
top_k_idx	main.py	/^        top_k_scores, top_k_idx = torch.topk(score, 2 * top_k_clues + r, largest=False)$/;"	v
top_k_scores	main.py	/^        top_k_scores, top_k_idx = torch.topk(score, 2 * top_k_clues + r, largest=False)$/;"	v
train_losses	old/batched.py	/^train_losses = []$/;"	v
train_losses	old/batched_simple.py	/^train_losses = []$/;"	v
train_losses	old/train.py	/^train_losses = []$/;"	v
vocab	old/inference.py	/^vocab, vocab_emb = load_vocabulary(word_embedding, vocab_filename=config.vocab_filename)$/;"	v
vocab_emb	old/inference.py	/^vocab, vocab_emb = load_vocabulary(word_embedding, vocab_filename=config.vocab_filename)$/;"	v
vocab_filename	old/config.py	/^vocab_filename = "english_vocab_2.txt"$/;"	v
vocabulary	main.py	/^vocabulary = load_vocab(spymaster_vocab)$/;"	v
vocabulary_embeddings	main.py	/^vocabulary_embeddings = word_embedding.get_vecs_by_tokens($/;"	v
vocabulary_numpy	main.py	/^vocabulary_numpy = np.array(vocabulary, dtype="object")$/;"	v
word	old/inference.py	/^    word = vocab[idx]$/;"	v
word_embedding	main.py	/^word_embedding = FastText(language="en")$/;"	v
word_embedding	old/inference.py	/^word_embedding = GloVe(name=config.emb_name, dim=config.emb_dim)$/;"	v
word_embeddings	old/main.py	/^word_embeddings = GloVe(name=emb_name, dim=emb_dim)$/;"	v
word_embeddings	old/simple.py	/^word_embeddings = GloVe(name=emb_name, dim=emb_dim)$/;"	v
word_loss	old/inference.py	/^    word_loss = loss_function(word_embedding.get_vecs_by_tokens([word]), positive_emb, negative_/;"	v
words	old/main.py	/^            words = position["team_words"][idx]$/;"	v
words2vec	old/main.py	/^def words2vec($/;"	f	typeref:typename:torch.Tensor
words2vec	old/simple.py	/^def words2vec($/;"	f	typeref:typename:torch.Tensor
words_in_embedding	main.py	/^words_in_embedding = set(word_embedding.itos)$/;"	v
x_T	old/main.py	/^        x_T = position["team_words_emb"]$/;"	v
x_T	old/simple.py	/^        x_T = position["team_words_emb"]$/;"	v
x_a	old/main.py	/^    x_e, x_b, x_a = ($/;"	v
x_a	old/simple.py	/^    x_e, x_b, x_a = ($/;"	v
x_b	old/main.py	/^    x_e, x_b, x_a = ($/;"	v
x_b	old/simple.py	/^    x_e, x_b, x_a = ($/;"	v
x_e	old/main.py	/^    x_e, x_b, x_a = ($/;"	v
x_e	old/simple.py	/^    x_e, x_b, x_a = ($/;"	v
x_t	old/main.py	/^            x_t = position["team_words_emb"][idx]$/;"	v
x_t	old/simple.py	/^            x_t = position["team_words_emb"][idx]$/;"	v
