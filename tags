!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/odinhg/Python/codenames/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
1. Enemy loss $L_E$	README.md	/^#### 1. Enemy loss $L_E\$$/;"	t	section:Codenames Spymaster""Learning Objective
2. Civilian loss $L_C$	README.md	/^#### 2. Civilian loss $L_C\$$/;"	t	section:Codenames Spymaster""Learning Objective
3. Assassin loss $L_A$	README.md	/^#### 3. Assassin loss $L_A\$$/;"	t	section:Codenames Spymaster""Learning Objective
ClueLoss	main.py	/^class ClueLoss(nn.Module):$/;"	c
Codenames Spymaster	README.md	/^# Codenames Spymaster$/;"	c
Definitions	README.md	/^## Definitions $/;"	s	chapter:Codenames Spymaster
F	main.py	/^import torch.nn.functional as F$/;"	I	nameref:module:torch.nn.functional
Learning Objective	README.md	/^## Learning Objective$/;"	s	chapter:Codenames Spymaster
Online Mining of Games (OMG)	README.md	/^### Online Mining of Games (OMG)$/;"	S	section:Codenames Spymaster""Learning Objective
PermEquivLayer	main.py	/^class PermEquivLayer(nn.Module):$/;"	c
Set2Vec	main.py	/^class Set2Vec(nn.Module):$/;"	c
SpyMasterModel	main.py	/^class SpyMasterModel(nn.Module):$/;"	c
__init__	main.py	/^    def __init__(self, emb_dim: int, expand_factor: int = 2):$/;"	m	class:SpyMasterModel
__init__	main.py	/^    def __init__(self, enemy_margin: float, bystander_margin: float, assassin_margin: float):$/;"	m	class:ClueLoss
__init__	main.py	/^    def __init__(self, in_dim: int, hidden_dim: int, out_dim: int):$/;"	m	class:Set2Vec
__init__	main.py	/^    def __init__(self, in_dim: int, out_dim: int):$/;"	m	class:PermEquivLayer
assassin_margin	main.py	/^enemy_margin, bystander_margin, assassin_margin = 0.05, 0.01, 0.1$/;"	v
bystander_margin	main.py	/^enemy_margin, bystander_margin, assassin_margin = 0.05, 0.01, 0.1$/;"	v
c_t	main.py	/^            c_t = model(x_t, x_e, x_b, x_a)$/;"	v
deck	main.py	/^deck = load_deck()$/;"	v
deck_numpy	main.py	/^deck_numpy = np.array(deck, dtype="object")$/;"	v
emb_dim	main.py	/^emb_dim = 300# 50, 100, 200 or 300$/;"	v
embedded_deck	main.py	/^embedded_deck = words2vec(word_embeddings, deck)$/;"	v
enemy_margin	main.py	/^enemy_margin, bystander_margin, assassin_margin = 0.05, 0.01, 0.1$/;"	v
forward	main.py	/^    def forward($/;"	m	class:SpyMasterModel	typeref:typename:torch.Tensor
forward	main.py	/^    def forward(self, c_t, x_t, x_e, x_b, x_a):$/;"	m	class:ClueLoss
forward	main.py	/^    def forward(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:PermEquivLayer	typeref:typename:torch.Tensor
forward	main.py	/^    def forward(self, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:Set2Vec	typeref:typename:torch.Tensor
generate_random_position	main.py	/^def generate_random_position(deck: np.ndarray, embedded_deck: torch.Tensor):$/;"	f
idx	main.py	/^            idx = list(combination)$/;"	v
load_deck	main.py	/^def load_deck(filename: str = "codename_vocab.txt") -> list[str]:$/;"	f	typeref:typename:list[str]
loss	main.py	/^            loss = loss_function(c_t, x_t, x_e, x_b, x_a)$/;"	v
loss_function	main.py	/^loss_function = ClueLoss(enemy_margin, bystander_margin, assassin_margin)$/;"	v
lr	main.py	/^lr = 0.01$/;"	v
max_losses	main.py	/^max_losses = []$/;"	v
max_step_loss	main.py	/^    max_step_loss = np.max(step_losses)$/;"	v
mean_losses	main.py	/^mean_losses = []$/;"	v
mean_step_loss	main.py	/^    mean_step_loss = np.mean(step_losses)$/;"	v
min_losses	main.py	/^min_losses = []$/;"	v
min_step_loss	main.py	/^    min_step_loss = np.min(step_losses)$/;"	v
model	main.py	/^model = SpyMasterModel(emb_dim)$/;"	v
n_team_words	main.py	/^    n_team_words = len(position["team_words_emb"])$/;"	v
nn	main.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
np	main.py	/^import numpy as np$/;"	I	nameref:module:numpy
num_params	main.py	/^num_params = sum(p.numel() for p in model.parameters() if p.requires_grad)$/;"	v
optimizer	main.py	/^optimizer = torch.optim.SGD(model.parameters(), lr=lr)$/;"	v
plt	main.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
position	main.py	/^    position = generate_random_position(deck_numpy, embedded_deck)$/;"	v
step_losses	main.py	/^    step_losses = []$/;"	v
steps	main.py	/^steps = 5000 $/;"	v
word_embeddings	main.py	/^word_embeddings = GloVe(name="42B", dim=emb_dim)$/;"	v
words2vec	main.py	/^def words2vec($/;"	f	typeref:typename:torch.Tensor
x_a	main.py	/^    x_e, x_b, x_a = ($/;"	v
x_b	main.py	/^    x_e, x_b, x_a = ($/;"	v
x_e	main.py	/^    x_e, x_b, x_a = ($/;"	v
x_t	main.py	/^            x_t = position["team_words_emb"][idx]$/;"	v
